{"name": "test_stays_currency_change[USD-USD $ US$ $,-Currencies are matching]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=121.0.6167.140); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF620195E42+3538674]\n\t(No symbol) [0x00007FF61FDB4C02]\n\t(No symbol) [0x00007FF61FC65AEB]\n\t(No symbol) [0x00007FF61FC6AD39]\n\t(No symbol) [0x00007FF61FC6D150]\n\t(No symbol) [0x00007FF61FC6D210]\n\t(No symbol) [0x00007FF61FCA723B]\n\t(No symbol) [0x00007FF61FCCF0AA]\n\t(No symbol) [0x00007FF61FCA124A]\n\t(No symbol) [0x00007FF61FCCF2C0]\n\t(No symbol) [0x00007FF61FCEBDE3]\n\t(No symbol) [0x00007FF61FCCEE53]\n\t(No symbol) [0x00007FF61FC9F514]\n\t(No symbol) [0x00007FF61FCA0631]\n\tGetHandleVerifier [0x00007FF6201C6CAD+3738973]\n\tGetHandleVerifier [0x00007FF62021C506+4089270]\n\tGetHandleVerifier [0x00007FF620214823+4057299]\n\tGetHandleVerifier [0x00007FF61FEE5C49+720121]\n\t(No symbol) [0x00007FF61FDC126F]\n\t(No symbol) [0x00007FF61FDBC304]\n\t(No symbol) [0x00007FF61FDBC432]\n\t(No symbol) [0x00007FF61FDABD04]\n\tBaseThreadInitThunk [0x00007FFD6575257D+29]\n\tRtlUserThreadStart [0x00007FFD6686AA58+40]", "trace": "self = <tests.test_changing_currency.TestChangingCurrency object at 0x00000189584A6600>\ndriver_undetected = <seleniumbase.undetected.Chrome (session=\"b08c56b3be701bc33251ce101562639a\")>\nwebsite_currency = 'USD', match_currency = 'USD $ US$ $,'\nexpected = 'Currencies are matching'\n\n    @pytest.mark.parametrize('website_currency, match_currency, expected', CurrencyData.currency_list)\n    def test_stays_currency_change(self, driver_undetected, website_currency, match_currency, expected):\n        ccs = ChangeCurrencySteps(driver_undetected)\n        ccs.open_page(Urls.HOME_URL)\n        ccs.choose_currency(website_currency)\n        with soft_assertions():\n>           assert_that(match_currency).contains(ccs.get_stays_price_currency())\n\ntest_changing_currency.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\final_project\\steps\\ChangeCurrencySteps.py:31: in get_stays_price_currency\n    price = self.wait_for(ccp.STAY_PRICE).text.replace('.', '')\nC:\\Users\\sabro\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\final-project-plEYY5ae-py3.12\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\nC:\\Users\\sabro\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\final-project-plEYY5ae-py3.12\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\sabro\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\final-project-plEYY5ae-py3.12\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018959A3E7B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF61FDABD04]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD6575257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFD6686AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=121.0.6167.140); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF620195E42+3538674]\nE       \t(No symbol) [0x00007FF61FDB4C02]\nE       \t(No symbol) [0x00007FF61FC65AEB]\nE       \t(No symbol) [0x00007FF61FC6AD39]\nE       \t(No symbol) [0x00007FF61FC6D150]\nE       \t(No symbol) [0x00007FF61FC6D210]\nE       \t(No symbol) [0x00007FF61FCA723B]\nE       \t(No symbol) [0x00007FF61FCCF0AA]\nE       \t(No symbol) [0x00007FF61FCA124A]\nE       \t(No symbol) [0x00007FF61FCCF2C0]\nE       \t(No symbol) [0x00007FF61FCEBDE3]\nE       \t(No symbol) [0x00007FF61FCCEE53]\nE       \t(No symbol) [0x00007FF61FC9F514]\nE       \t(No symbol) [0x00007FF61FCA0631]\nE       \tGetHandleVerifier [0x00007FF6201C6CAD+3738973]\nE       \tGetHandleVerifier [0x00007FF62021C506+4089270]\nE       \tGetHandleVerifier [0x00007FF620214823+4057299]\nE       \tGetHandleVerifier [0x00007FF61FEE5C49+720121]\nE       \t(No symbol) [0x00007FF61FDC126F]\nE       \t(No symbol) [0x00007FF61FDBC304]\nE       \t(No symbol) [0x00007FF61FDBC432]\nE       \t(No symbol) [0x00007FF61FDABD04]\nE       \tBaseThreadInitThunk [0x00007FFD6575257D+29]\nE       \tRtlUserThreadStart [0x00007FFD6686AA58+40]\n\nC:\\Users\\sabro\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\final-project-plEYY5ae-py3.12\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "parameters": [{"name": "website_currency", "value": "'USD'"}, {"name": "match_currency", "value": "'USD $ US$ $,'"}, {"name": "expected", "value": "'Currencies are matching'"}], "start": 1707160725441, "stop": 1707160752703, "uuid": "25d7e629-160d-4ed7-9cb4-2ec90dbea918", "historyId": "cf0295b27772bc67fffc4fec7b4b4573", "testCaseId": "bd9ed2182fffe75124ca6be199711a5a", "fullName": "tests.test_changing_currency.TestChangingCurrency#test_stays_currency_change", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_changing_currency"}, {"name": "subSuite", "value": "TestChangingCurrency"}, {"name": "host", "value": "Alice"}, {"name": "thread", "value": "4652-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_changing_currency"}]}